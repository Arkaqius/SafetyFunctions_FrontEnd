---
import { getHighestPriorityFault } from '../utils/faultUtils';

const faults = [
  {
    type: 'Gas Leak Detected',
    location: 'Kitchen',
    severity: 'danger',
    priority: 0,
    timestamp: new Date().toISOString()
  },
  {
    type: 'Window Open During Storm',
    location: 'Living Room',
    severity: 'warning',
    priority: 1,
    timestamp: new Date(Date.now() - 1800000).toISOString()
  }
];

const highestPriorityFault = getHighestPriorityFault(faults);
const hasCriticalFault = highestPriorityFault?.priority === 0;

const statusConfig = {
  critical: {
    bgColor: 'bg-red-900/50',
    textColor: 'text-red-100',
    borderColor: 'border-red-500',
    icon: 'ðŸ”´',
    animation: 'animate-pulse'
  },
  safe: {
    bgColor: 'bg-green-900/50',
    textColor: 'text-green-100',
    borderColor: 'border-green-500',
    icon: 'ðŸŸ¢',
    animation: ''
  }
};

const currentStatus = hasCriticalFault ? statusConfig.critical : statusConfig.safe;
---

<div class={`border-b ${currentStatus.borderColor} ${currentStatus.bgColor} backdrop-blur-sm`}>
  <div class="container mx-auto px-4 py-3">
    <div class="flex items-center justify-between">
      <div class={`flex items-center gap-2 ${currentStatus.textColor} ${currentStatus.animation}`}>
        <span class="text-xl">{currentStatus.icon}</span>
        <span class="font-semibold">
          {hasCriticalFault 
            ? `Critical Issue: ${highestPriorityFault.type} in ${highestPriorityFault.location}`
            : 'All Systems Normal'}
        </span>
      </div>
      {hasCriticalFault && (
        <button 
          class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md shadow-lg transition-colors"
        >
          Take Immediate Action
        </button>
      )}
    </div>
  </div>
</div>